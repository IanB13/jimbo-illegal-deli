{
    "swagger": "2.0",
    "info": {
      "version": "0.0.1",
      "title": "Jimbo's Ilegal Deli",
      "contact":{
        "name":"check out the code here:",
        "url":"https://github.com/IanB13/jimbo-illegal-deli"
      },
      "description": "Jimboâ€™s Illegal Deli (JID) is an online marketplace that brings together suppliers of black market items such as ivory and irresponsibly-sourced caviar and not-very-morally-good customers. JID has an exclusive inventory and a loyal customer base. \r\n In order to use the examples you must click 'Authorize' and provide a password"
    },
    "basePath": "/",
    "securityDefinitions":{
      "JimboPassword":{
        "type":"apiKey",
        "name":"Authorization",
        "in":"header"
      },
      "UserPassword":{
        "type":"apiKey",
        "name":"Authorization",
        "in":"header"
      }
    },
    "tags" : [
      {
      "name": "Customers", 
      "description": "Everything about the deli's dubious customers" 
      },
      {
        "name": "Inventory",
        "description":"From hand grenades to blue whales, the inventory has what you need"
      },
      {
        "name": "Events",
        "description":"Sales events to keep up with the customers"
      }
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/customers": {
         "get": {
            "tags": ["Customers"],
            "summary": "gets all customers",
            "description": "Retrives an array of all Jimbo's Ilegal Deli's customers. All data is retrived except for the customer's password hash. This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId": "GET customers",
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Sent customers"
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          }
      },
      "/customers/{id}": {
          "get":{
            "tags":["Customers"],
            "summary": "get an individual customer",
            "description": "Retrives an individual Jimbo's Ilegal Deli customer. Only the customers first name, last name and email is retrived. This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId":"GET customers by id",
            "produces": [
              "application/json"
            ],
            "parameters":[
              {
                "name": "id",
                "in": "path",
                "description": "MongoDB ID to find customer by",
                "required": true,
                "type": "string",
                "example": "5f75e6d1fc77d63950276a97"
              }
            ],
            "responses": {
              "200": {
                "description": "An individual customer is returned",
                "schema":{
                  "$ref":"#/definitions/customer"
                }
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          }
        },
        "/customers/distance/": {
          "get":{
            "tags":["Customers"],
            "summary":"Gets distance between customer and inputed coordinate point via helicopter.",
            "description": "Finds the distance from Jimbo's current location to a customer. All inputs must be provided in a query string. This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId":"GET distance helicopter",
            "produces": [
              "application/json"
            ],
            "parameters":[
                {
                  "name": "id",
                  "in": "query",
                  "description": "customer ID",
                  "required": true,
                  "type": "string",
                  "example": "5f75e6d1fc77d63950276a97"
                },
                {
                  "name": "latitude",
                  "in": "query",
                  "description": "Lattitude of start point",
                  "required": true,
                  "type": "number"
                },
                {
                  "name": "longitude",
                  "in": "query",
                  "description": "Longitude of start point",
                  "required": true,
                  "type": "number"
                }
              ],
            "responses": {
              "200": {
                "description": "distance from point to customer",
                "schema":{
                  "$ref":"#/definitions/distance"
                }
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          },
          "security":[
            {"JimboPassword":[]}
            ]
        },
        "/inventory": {
          "get":{
            "tags":["Inventory"],
            "summary":"gets all inventory items",
            "description": "Retrives an array of all Jimbo's Ilegal Deli's inventory. All inventory data is retrived. This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId":"GET inventory",
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "All inventory Items"
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          },
          "post":{
            "tags":["Inventory"],
            "summary":"adds an item to the inventory",
            "description":"Adds an item to Jimbo's Ilegal Deli's inventory. The item name must be unique. More fields are automatically created based on the provided country code. This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId":"post",
            "produces": [
              "application/json"
            ],
            "parameters":[
                {
                  "name": "body",
                  "in": "body",
                  "required": true,
                  "description":"item to add to database",
                  "schema":{
                    "type": "object",
                    "$ref":"#/definitions/addItem"
                  }
                }
              ],
            "responses": {
              "200": {
                "description": "Add",
                "schema":{
                }
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          }
        },
        "/inventory/order": {
          "put":{
            "tags":["Inventory"],
            "summary":"processes a customer order",
            "description":"Processes a customer order. Must include the customers UID. The order parameter is an array of objects. Object inside the order array works as {'item': quantity} .This endpoint is protected by a the customer's password and it must be provided in the Authorization header",
            "operationId":"PUT order",
            "produces": [
              "application/json"
            ],
            "parameters":[
                {
                  "name": "body",
                  "in": "body",
                  "required": true,
                  "description":"item to add to database",
                  "schema":{
                    "type": "object",
                    "$ref":"#/definitions/order"
                  }
                }
              ],
            "responses": {
              "200": {
                "description": "Order Response"
              }
            },
            "security":[
              {"UserPassword":[]}
              ]
          }
        },
        "/inventory/currency": {
          "put":{
            "tags":["Inventory"],
            "summary": "update items prices to selected currency",
            "description":"Updates currency in database to provided code, if an item of id is provided it will only update the selected inv item. Id or item can be provided, not both.This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId":"PUT Currency",
            "produces": [
              "application/json"
            ],
            "parameters":[
              {
                "name": "body",
                "in": "body",
                "required": true,
                "description":"item to add to database",
                "schema":{
                  "type": "object",
                  "$ref":"#/definitions/currencyChange"
                }
              }
              ],
            "responses": {
              "200": {
                "description": "Changed Inventory"
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          }
        },
        "/events": {
          "get":{
            "tags":["Events"],
            "summary":"Gets all events in database",
            "description":"Get all events in database. Events are created everytime a customer orders This endpoint is protected by Jimbo's password and it must be provided in the Authorization header",
            "operationId":"get",
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "All events"
              }
            },
            "security":[
              {"JimboPassword":[]}
              ]
          }
        }
    },



    "definitions": {
      "distance": {
        "properties": {
          "miles": {
            "type": "number",
            "example": 400
          },
          "meters": {
            "type": "number",
            "example": 643738
          }
        }
      },
      "customer": {
        "properties": {
          "first_name": {
            "type": "string",
            "example": "Jamaal"
          },
          "last_name": {
            "type": "string",
            "example": "Egre"
          },
          "email": {
            "type": "string",
            "example": "jegred@redcross.org"
          }
        }
      },
      "addItem":{
        "properties": {
          "details": {
            "type": "object",
            "properties": {
              "price":{
                "type": "number"},
              "amount":{
                "type": "number"},
              "color":{
                "type": "string"},
              "color_hex":{
                "type": "string"}
            }
          },
          "supplier_details": {
            "type": "object",
            "properties":{
            "contact": {
              "type": "object",
              "properties":{
                "phone":{
                  "type":"string"
                },
                "email":{
                  "type":"string"
                } 
              }
            },
            "country":{ 
              "type":"string"
              } ,
            "country_code":{ 
              "type":"string"
              },
            "currency":{ 
              "type":"string"
              }

            }
          },
          "item": {
            "type": "string"
          }
        }
      },
      "order": {
        "properties": {
          "order": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "currency_code": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "currencyChange":{
        "properties":{
          "code":{
            "type":"string"
          },
          "id":{
            "type":"string"
          },
          "item":{
            "type":"string"
          }
        }
      }
    }
  }